name: Release owlcms-controlpanel

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-alpha*'
      - 'v*.*.*-beta*'
      - 'v*.*.*-rc*'
  workflow_dispatch:

jobs:
  build_mac:
    runs-on: macos-13
    env:
      BUILD_MAC: false
      BUILD_WINDOWS: true
      BUILD_RASPBERRY: false
      BUILD_LINUX: false

    steps:
    - name: Checkout code
      if: ${{ env.BUILD_MAC == 'true' }}
      uses: actions/checkout@v4

    - name: Set up Go
      if: ${{ env.BUILD_MAC == 'true' }}
      uses: actions/setup-go@v2
      with:
        go-version: '1.23.4'

    - name: Install gh CLI
      if: ${{ env.BUILD_MAC == 'true' }}
      run: |
        brew install gh

    - name: Extract tag
      id: extract_tag
      run: |
        echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Substitute tag in config.go
      if: ${{ env.BUILD_MAC == 'true' }}
      run: |
        # use this approach because we can't easily set ldflags in fyne-cross
        sed -i '' "s/_TAG_/${TAG}/g" config.go

    - name: Install fyne
      if: ${{ env.BUILD_MAC == 'true' }}
      run: go install fyne.io/fyne/v2/cmd/fyne@latest

    - name: Install appdmg
      if: ${{ env.BUILD_MAC == 'true' }}
      run: npm install -g appdmg

    # - name: Build for macOS arm64
    #   if: ${{ env.BUILD_MAC == 'true' }}
    #   run: |
    #     export GOOS=darwin
    #     export GOARCH=arm64
    #     export CGO_ENABLED=1
    #     go build -o owlcms .

    # - name: Package for macOS arm64
    #   if: ${{ env.BUILD_MAC == 'true' }}
    #   run: |
    #     export GOOS=darwin
    #     export GOARCH=arm64
    #     export CGO_ENABLED=1
    #     rm -rf owlcms.app
    #     fyne package -os darwin -icon Icon.png -name owlcms -executable owlcms

    # - name: Move macOS arm64 app to dist directory
    #   if: ${{ env.BUILD_MAC == 'true' }}
    #   run: |
    #     rm -rf dist/darwin-arm64
    #     mkdir -p dist/darwin-arm64
    #     mv owlcms.app dist/darwin-arm64/
    #     ls -l dist/darwin-arm64

    # - name: Create DMG for macOS arm64
    #   if: ${{ env.BUILD_MAC == 'true' }}
    #   run: |
    #     mkdir -p artifacts
    #     appdmg dist/appdmg_arm64.json artifacts/macOS_Apple_M-series_Control_Panel_Installer.dmg

    - name: Build for macOS amd64
      if: ${{ env.BUILD_MAC == 'true' }}
      run: |
        rm -f owlcms
        export GOOS=darwin
        export GOARCH=amd64
        export CGO_ENABLED=1
        go build -o owlcms .

    - name: Package for macOS amd64
      if: ${{ env.BUILD_MAC == 'true' }}
      run: |
        rm -rf owlcms.app
        fyne package -os darwin -icon Icon.png -name owlcms -executable owlcms

    - name: Move macOS amd64 app to dist directory
      if: ${{ env.BUILD_MAC == 'true' }}
      run: |
        rm -rf dist/darwin-amd64
        mkdir -p dist/darwin-amd64
        mv owlcms.app dist/darwin-amd64/

    - name: Create DMG for macOS amd64
      if: ${{ env.BUILD_MAC == 'true' }}
      run: |
        mkdir -p artifacts
        appdmg dist/appdmg_amd64.json artifacts/macOS_Control_Panel_Installer.dmg

    - name: Upload macOS amd64 DMG
      if: ${{ env.BUILD_MAC == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: build_mac_artifacts
        path: artifacts/*

  build_crosscompile:
    runs-on: ubuntu-latest
    env:
      BUILD_MAC: false
      BUILD_WINDOWS: true
      BUILD_RASPBERRY: false
      BUILD_LINUX: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install GitHub CLI
      run: |
        wget https://github.com/cli/cli/releases/download/v2.32.0/gh_2.32.0_linux_amd64.deb
        sudo dpkg -i gh_2.32.0_linux_amd64.deb

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.23.4'

    - name: Install fyne-cross
      run: |
        go install github.com/fyne-io/fyne-cross@latest
        echo "${HOME}/go/bin" >> $GITHUB_PATH

    - name: Extract tag
      id: extract_tag
      run: |
        echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        echo "DEB_TAG=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

    - name: Substitute tag in config.go
      run: |
        sed -i "s/_TAG_/${TAG}/g" config.go

    # Windows build steps
    - name: Build for Windows
      if: ${{ env.BUILD_WINDOWS == 'true' }}
      run: |
        fyne-cross windows -arch amd64 -app-id app.owlcms.controlpanel -name owlcms -debug
        mkdir -p artifacts
        mv fyne-cross/bin/windows-amd64/owlcms.exe artifacts/owlcms.exe

    # Linux and Raspberry Pi preparation
    - name: Install Ruby
      if: ${{ env.BUILD_LINUX == 'true' }}
      run: sudo apt-get install -y ruby-full

    - name: Install fpm
      if: ${{ env.BUILD_LINUX == 'true' }}
      run: |
        sudo gem install --no-document fpm
        echo "$(gem environment gemdir)/bin" >> $GITHUB_PATH

    # Linux Intel steps
    - name: Build for Linux amd64
      if: ${{ env.BUILD_LINUX == 'true' }}
      run: fyne-cross linux -arch amd64 -app-id app.owlcms.controlpanel -icon Icon.png -name owlcms

    - name: Copy Linux binary
      if: ${{ env.BUILD_LINUX == 'true' }}
      run: cp fyne-cross/bin/linux-amd64/owlcms-launcher fyne-cross/bin/linux-amd64/owlcms-linux

    - name: Create Linux Intel DEB package
      if: ${{ env.BUILD_LINUX == 'true' }}
      run: |
        fpm -s tar -t deb -n owlcms-launcher -v ${DEB_TAG} -a amd64 --prefix / \
          --after-install ./dist/after_install.sh \
          --after-remove ./dist/after_remove.sh \
          ./fyne-cross/dist/linux-amd64/owlcms.tar.xz
        mkdir -p artifacts
        mv owlcms-launcher_${DEB_TAG}_amd64.deb artifacts/Linux_Control_Panel_Installer.deb

    # Raspberry Pi steps
    - name: Build for Linux arm64
      if: ${{ env.BUILD_RASPBERRY == 'true' }}
      run: fyne-cross linux -arch arm64 -app-id app.owlcms.controlpanel -icon Icon.png -name owlcms

    - name: Copy Raspberry Pi binary
      if: ${{ env.BUILD_RASPBERRY == 'true' }}
      run: cp fyne-cross/bin/linux-arm64/owlcms-launcher fyne-cross/bin/linux-arm64/owlcms-pi

    - name: Create Raspberry Pi DEB package
      if: ${{ env.BUILD_RASPBERRY == 'true' }}
      run: |
        fpm -s tar -t deb -n owlcms-launcher -v ${DEB_TAG} -a arm64 --prefix / \
          --after-install ./dist/after_install.sh \
          --after-remove ./dist/after_remove.sh \
          ./fyne-cross/dist/linux-arm64/owlcms.tar.xz
        mkdir -p artifacts
        mv owlcms-launcher_${DEB_TAG}_arm64.deb artifacts/Raspberry_Pi_arm64_Control_Panel_Installer.deb

    # Save artifacts for later steps
    - name: Upload build_crosscompile_artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build_crosscompile_artifacts
        path: artifacts/*

  package_windows:
    runs-on: windows-latest
    needs: build_crosscompile
    env:
      BUILD_MAC: false
      BUILD_WINDOWS: true
      BUILD_RASPBERRY: false
      BUILD_LINUX: false

    steps:
    - name: Checkout code
      if: ${{ env.BUILD_WINDOWS == 'true' }}
      uses: actions/checkout@v4

    - name: Extract tag
      id: extract_tag
      shell: bash
      if: ${{ env.BUILD_WINDOWS == 'true' }}
      run: |
        # This creates the env var in a way that works for all shells
        tag=${GITHUB_REF#refs/tags/}
        echo "TAG=$tag" >> $GITHUB_ENV
        echo "DEB_TAG=${tag#v}" >> $GITHUB_ENV
        echo "Extracted TAG=$tag"

    - name: Install gh CLI
      if: ${{ env.BUILD_WINDOWS == 'true' }}
      run: choco install gh

    - name: Download build_crosscompile_artifacts
      if: ${{ env.BUILD_WINDOWS == 'true' }}
      uses: actions/download-artifact@v4
      with:
        name: build_crosscompile_artifacts
        path: ./dist

    - name: Install MakeAppx
      if: ${{ env.BUILD_WINDOWS == 'true' }}
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2286561" -OutFile "sdksetup.exe"
        Start-Process -FilePath "sdksetup.exe" -ArgumentList "/features OptionId.SigningTools /q" -NoNewWindow -Wait

    - name: Create MSIX Package
      if: ${{ env.BUILD_WINDOWS == 'true' }}
      shell: pwsh
      run: |
        # Ensure directory exists and is empty
        if (Test-Path dist\msix) {
            Remove-Item -Path dist\msix -Recurse -Force
        }
        New-Item -ItemType Directory -Path dist\msix -Force
        
        # Copy required files
        Copy-Item -Path dist\owlcms.exe -Destination dist\msix\
        Copy-Item -Path dist\Assets -Destination dist\msix\ -Recurse
        
        # Get tag from environment and validate
        $tagValue = [System.Environment]::GetEnvironmentVariable('TAG')
        if (-not $tagValue) {
            Write-Error "TAG environment variable is not set"
            exit 1
        }
        
        # Calculate version
        $version = $tagValue.TrimStart('v')
        $fourthPart = 400  # default for release version
        if ($version -match "-(alpha|beta|rc)(\d+)") {
            $prefix = $matches[1]
            $num = [int]$matches[2]
            switch ($prefix) {
                "alpha" { $fourthPart = 100 + $num }
                "beta"  { $fourthPart = 200 + $num }
                "rc"    { $fourthPart = 300 + $num }
            }
        }
        $version = $version -replace '-.*$', ''  # remove any pre-release suffix
        $versionParts = $version -split '\.'
        $major = [int]$versionParts[0]
        $minor = [int]$versionParts[1]
        $patch = [int]$versionParts[2]
        $computed = (($patch + 1) * 1000) + $fourthPart
        $fullVersion = "$($major).$($minor).$($computed)"

        Write-Host "Using version: $fullVersion"
        
        # Update manifest
        if (-not (Test-Path dist\AppxManifest.xml)) {
            Write-Error "AppxManifest.xml not found in dist directory"
            exit 1
        }
        $manifestContent = Get-Content dist\AppxManifest.xml -Raw
        $manifestContent = $manifestContent -replace '_TAG_',$fullVersion
        $manifestContent | Set-Content dist\msix\AppxManifest.xml -Force
        
        & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\MakeAppx.exe" pack /d dist\msix /p "artifacts\owlcms-Panel_windows_$($tagValue).msix"
        if ($LASTEXITCODE -ne 0) {
            Write-Error "MakeAppx failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
        }

    - name: Prepare Inno Setup directory
      if: ${{ env.BUILD_WINDOWS == 'true' }}
      run: |
        mkdir dist/iss
        cp dist/owlcms.exe dist/iss/
        cp dist/*.ico dist/iss/

    - name: Install Inno Setup
      if: ${{ env.BUILD_WINDOWS == 'true' }}
      run: choco install innosetup
      
    - name: Run Inno Setup
      if: ${{ env.BUILD_WINDOWS == 'true' }}
      shell: pwsh
      run: |
        cd dist
        & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "setup.iss"
        dir
        cd ..
        New-Item -ItemType Directory -Path artifacts -Force
        mv dist\owlcms-Panel-installer_windows.exe artifacts\Windows_Control_Panel_Installer.exe
        cp dist\owlcms.exe artifacts\owlcms_controlpanel.exe

    - name: Save package_windows_artifacts
      if: ${{ env.BUILD_WINDOWS == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: package_windows_artifacts
        path: artifacts/*

  create_release:
    runs-on: ubuntu-latest
    needs: [build_mac, build_crosscompile, package_windows]
    env:
      BUILD_MAC: false
      BUILD_WINDOWS: true
      BUILD_RASPBERRY: false
      BUILD_LINUX: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract tag
      id: extract_tag
      run: |
        echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        echo "DEB_TAG=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

    - name: Create dist directory
      run: mkdir -p dist

    - name: Prepare release notes
      run: |
        cp RELEASE.md ./dist/RELEASE.md
        sed -i "s/_TAG_/${TAG}/g" ./dist/RELEASE.md

    # one single download for each of the job needs, in the same order
    - name: Download build_mac_artifacts
      if: ${{ env.BUILD_RASPBERRY == 'true' }}
      uses: actions/download-artifact@v4
      with:
        name: build_mac_artifacts
        path: ./dist

    - name: Download build_crosscompile_artifacts
      if: ${{ env.BUILD_LINUX == 'true' }}
      uses: actions/download-artifact@v4
      with:
        name: build_crosscompile_artifacts
        path: ./dist

    - name: Download package_windows_artifacts
      if: ${{ env.BUILD_WINDOWS == 'true' }}
      uses: actions/download-artifact@v4
      with:
        name: package_windows_artifacts
        path: ./dist

    - name: Create GitHub Release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        if [[ "${TAG}" == *"-"* ]]; then
          gh release create ${{ env.TAG }} \
            --title "owlcms Control Panel ${{ env.TAG }}" \
            --notes-file ./dist/RELEASE.md \
            --prerelease
        else
          gh release create ${{ env.TAG }} \
            --title "owlcms Control Panel ${{ env.TAG }}" \
            --notes-file ./dist/RELEASE.md
        fi

    # - name: Release macOS arm64 DMG
    #   if: ${{ env.BUILD_MAC == 'true' }}
    #   env:
    #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     gh release upload ${{ env.TAG }} dist/macOS_Apple_M-series_Control_Panel_Installer.dmg

    - name: Release macOS amd64 DMG
      if: ${{ env.BUILD_MAC == 'true' }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ env.TAG }} dist/macOS_Control_Panel_Installer.dmg

    - name: Release Raspberry Pi DEB package
      if: ${{ env.BUILD_RASPBERRY == 'true' }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ env.TAG }} dist/Raspberry_Pi_arm64_Control_Panel_Installer.deb

    - name: Release Linux Intel DEB package
      if: ${{ env.BUILD_LINUX == 'true' }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ env.TAG }} dist/Linux_Control_Panel_Installer.deb

    - name: Release Windows installer
      if: ${{ env.BUILD_WINDOWS == 'true' }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ env.TAG }} dist/Windows_Control_Panel_Installer.exe

    - name: Release Windows Executable
      if: ${{ env.BUILD_WINDOWS == 'true' }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ env.TAG }} dist/owlcms_controlpanel.exe

    - name: Release Windows MSIX package
      if: ${{ env.BUILD_WINDOWS == 'true' }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ env.TAG }} dist/owlcms-Panel_windows_${{ env.TAG }}.msix

